{"posts":[{"title":"4.12日常更新","text":"最近学习情况 准备面试了，八股文粗略的看了一遍，sql刷了50道题，算法题只刷了三四十题（感觉找小厂日常实习不太用得到那么多算法）。 简历上现在只有一个项目，苍穹外卖跟黑马点评的结合，打算再俗称一个轮子项目手写RPC框架，听说这个项目就是轮子界的苍穹外卖，只能做这些烂大街的项目了。 对于面试还有有点慌的，毕竟还没有工作面试过，希望能顺利一点。接下来应该就会增加更新频率了，顺利的话会更新面经。","link":"/2025/04/12/4.12/"},{"title":"3.27日常更新","text":"最近学习情况 这周在匆忙中度过，有两天给老师做事情，无心学习，不做事情的时候要上课，无心学习。 综上，本周无心学习。不过还有周六周日两天，希望能集中精力多学会。 打游戏 最近每天都上线玩《鸣潮》，有很多喜欢的角色但是资源不够，很纠结，想要直接买号，但是又想着找到实习后赚了钱再买，这种想法对么？ 实习啊实习，希望面试跟“旷课“都能顺利些。 心路历程 最近一直在看一本《心理控制术》的书，里面讲的许多还挺受用，作者所提出的”自我意象“的概念让我觉得有点熟悉，所谓的”自我意象“即你心里对自己的评价与印象，你在现实生活的反应都是基于自我意象，你可以塑造更好的自我意象实现更好的未来，听着满玄乎的。 感觉有点像大学的期末考试，明知道最后不会挂科但是还是要在期末周努力学习。仔细想想应该是先塑造了不会挂科的自我意象，然后通过努力学习使得现实中的自己跟自我意象更加接近了。 还有一个经历是我自己一直自我评价我的数学不是很好，就是学的不是很快，面对数学题脑子转的不快但是只要时间足够依旧能学会，这是我以前为自己设定的自我意象。设定后仿佛现实生活中遇到数学难题都在证明我的自我意象的准确，从而加深自我意象，现在想想这真是太错误了，分明就是给自己设了限制。幸好我还一直坚信应试考试不需要天赋就能得到还不错的成绩，让我高考跟考研数学都没有很差。 所以，不要给轻易自己设限，要树立一个符合实际又强大的自我意象。","link":"/2025/03/21/3.21/"},{"title":"Java学习笔记","text":"Java中实现登录校验拦截器的流程为什么需要登录校验拦截器？ 不同请求可能请求到不同的Controller，每一次都要先校验当前用户的登录状态，这样导致相同的代码写了很多遍。使用拦截器在请求Controller层时先将请求拦截下来，在拦截器中统一校验登录状态，决定是否放行。 实现登录校验拦截器的流程？ 1.自定义一个拦截器类实现HandlerInterceptor接口 2.实现接口中的方法，一般实现两个方法：preHandle()和afterCompletion()，前者是前置拦截，在Controller执行之前进行登录校验，后者在视图渲染完成后执行，用于销毁对应的用户信息，避免内存泄漏。 3.配置拦截器。编写一个mvcConfig配置类实现webmvcConfig接口，并加上@Config注解。 4.在配置类中实现方法addInterceptors()，使用拦截器的注册器添加拦截器及其要拦截的路径 使用JWT令牌的流程 引入jwt令牌操作的工具类 登录成功之后生成jwt令牌返回给前端 之后前端的每次请求都要携带jwt令牌 后续的请求在登录校验拦截器中进行jwt令牌的解析. JWT令牌的组成三部分：1. 令牌头，用于存储签名算法以及令牌类型。 2.有效载荷，存储我们自定义的信息。 3. 签名，根据签名算法及前面两部分的内容生成的，防止Token被篡改，保证安全性。前两部分原本都是Json格式的字符串，后来经过Base64编码。最后一部分不是经过Base64编码生成而是经过签名算法生成。 使用Spring Task的流程 引入Spring Task 的依赖 在启动类上加上@EnableScheduling注解，开启任务调度 自定义一个定时任务类，定时任务类上需要加上@Component注解，交给Spring容器管理 在自定义类中定义方法，编写要定时执行的代码。在该方法上添加@Scheduled注解，注解中编写cron表达式定义定时执行的时间 在我的项目中的应用： 1.买书者挑选了想要买的书并点击下单按钮后订单进入待支付状态，用户有十分钟时间完成付款操作，如果10分钟内没有付款视为超时，取消订单。而使用Spring Task 在每分钟检查是否有超时的订单，如果存在超时的订单，将该订单清除（设置订单状态为已取消） 2. 用户收到货后一直不点击已收货（则当前订单状态一直为派送中），每天凌晨1点处理定时执行处理所有的未收货订单，将其订单状态改为已完成。 使用WebSocket的流程通过Websocket实现管理端页面和服务端保持长连接状态。 导入webSocket的maven坐标 导入webSocket服务端组件webSocketServer，用于和客户端通信 导入配置类webSocketConfiguration，注册webSocket的服务端组件 导入定时任务类，在定时任务类中编写向客户端发送的数据 定时任务类上面首先有@Component注解，表明该类也是交给Spring容器管理。 还有个@ServerEndPoint注解里面填写了访问路径以及路径参数 定时类中方法有@OnOpen(连接建立时调用)，@OnMessage（收到客户端信息时调用）@OnClose（关闭连接方法），上面的方法都是加了对应的注解，自动执行。还有一个自定义的方法sendToAllClient，这个方法向所有会话发送信息，需要手动调用。 乐观锁是什么？怎么实现乐观锁？乐观锁是锁的一种设计理念，在访问共享资源时乐观的认为此次访问不会出现线程安全问题，等到要修改时判断该数据有没有被修改过，如果被修改过则认为出现了安全问题，需要再次尝试修改。乐观锁的实现一般有以下两种 直接使用要访问的共享资源的数量为依据判断是否出现了并发安全问题，但是这种情况下会出现ABA问题，即修改时发现数据跟第一次访问时的数据一致，但是并不能说明没有没有别的线程对该资源进行修改，可能是多个资源来回修改最后又修改回了原来的值。 新增一个版本号字段，每次有线程修改共享数据后都让版本号字段+1，线程修改数据时先判断当前版本号与第一次读取出来的版本号是否一致，如果不一致则发生了线程安全问题，需要自旋重试。 怎么实现一人一单？在单机模式下，通过直接加悲观锁synchronized可以解决，但是在分布式的情况下不行。 mysql的事务隔离级别有哪几个，都能解决什么问题？ READ-UNCOMMITTED(读取未提交)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。 READ-COMMITTED(读取已提交) ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。 REPEATABLE-READ(可重复读)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。 SERIALIZABLE(可串行化) ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。 MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） synchronized 加在不同地方分别是给谁加的锁？ synchronized 关键字加到 static 静态方法和 synchronized(class) 代码块上都是是给 Class 类上锁； synchronized 关键字加到实例方法上是给对象实例上锁； Spring事务底层原理，事务失效的场景有哪些？在你的项目中使用了Redisson，为什么要使用？ 为了实现一人一单功能，我最开始使用了synchronized锁来实现，但是在集群模式下这样做就会出现多线程并发安全问题，因为不同的tomcat服务器对应不同的JVM，那么synchronized锁住的对象也就成了不同的对象，因此需要添加分布式锁来实现。 最开始使用redis实现分布式锁（使用setnx，ex命令），redis中存储key为userId（用用户id作为锁实现对每个用户的请求加锁而不是对所有请求加锁），value为线程标识，线程标识用于实现在释放锁时比对标识，如果不是自己的锁则不能释放。 但是这样又会出现一个新的问题，对比锁与释放锁的操作不是原子性的，如果在对比锁完成后线程发生了阻塞则又会出现线程安全问题。 因此需要保证这两次操作的原子性，食用Lua脚本可以方便的实现redis多条命令的原子性执行。 以上都是基于redis的分布式锁，但是还有点小问题：1.不可重入 Redisson是在redis基础上实现的分布式工具的集合，我们可以直接使用Redisson提供的可重入的分布式锁。以下是在java中使用Redisson的基本流程： 引入Redisson的依赖 编写配置类配置Redisson 在业务中，先创建锁对象，再尝试获取锁，最后释放锁Redisson的底层就是通过Lua脚本实现的。","link":"/2025/04/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"Hello World!","text":"Welcome come to my blog! 为什么做博客？做博客的想法从大三就已经有了，当时正在学javaweb就萌生了做博客的想法，可惜没有坚持下去，甚至javaweb的课程都没有学完。 时间匆匆，已经到了研一，昨日看一位大佬的个人博客网站心血来潮右捡起了做博客的想法，想着现在AI技术这么成熟了，就算我不怎么会前端应该也能做出比较精美的页面。说做就做！ 没想到现在做博客这么简单了，直接使用Hexo就可以直接部署，还有现成的博客模板提供使用，用了一个下午就搭建好了，完全用不到后端知识，前端也直接用现成的模板，没想到这么轻松。 接下来的安排完善博客的各种功能吧，例如评论功能，音乐功能，分享功能等等，找一些像素风的二次元人物美化下我的网站。","link":"/2025/03/12/hello-world/"},{"title":"(持续更新)Hexo的icarus主题配置攻略与注意事项","text":"总结一下在完善博客功能时遇到的坑 icarus相关文件的位置 老版本的icarus的相关文件都会放在Blog\\themes\\icarus\\的目录下，但是现在新版本的配置文件直接就放在\\Blog\\目录下，themes文件夹为空，其他相关配置在\\Blog\\node_modules\\hexo-theme-icarus这个目录 如果对默认格式不满意，需要去\\Blog\\node_modules\\hexo-theme-icarus找相关的文件修改源代码，一般是.jsx文件 部署成功后默认的当前工作目录是\\Blog\\source，所以你可以在这个目录下新建一个img文件夹存放用到的图片，这样使用到图片时相对路径就是\\img\\XXX.jpg 评论插件 本站使用的是Twikoo评论系统，具体部署流程参考官方文档，一共是两个部署步骤，云部署与本地配置文件设置，本地配置时需要注意： env_id就是云部署完成后你自己可以访问通过的网络链接地址 评论相关设置不在本地文件中，而在博客评论界面有一个小齿轮按钮（别像我一样在本地找了半天） 如果要修改Twikoo前端版本，需要修改\\Blog\\node_modules\\hexo-component-inferno\\lib\\view\\comment 这个目录下的相关js文件，注意是hexo-component-inferno（太坑人了） 同时推荐使用 Qmsg酱，接入 Twikoo 后有新的访客评论时可以直接在🐧收到推送。 —————————————————————————–2025/4/12更新——————————————————————————- 一直想用smms做一个图床，这样在博客中上传图片就可以上传到图床中，这样相比直接在博客文档中插入图片对github服务器的压力小很多，但是最开始的时候smms网站的注册服务网页有问题，我邮件联系了管理员后过了一段时间发现他们竟然直接暂停了注册服务，这下不知道什么时候才能恢复了。","link":"/2025/03/15/hexo%E6%94%BB%E7%95%A5/"}],"tags":[{"name":"life","slug":"life","link":"/tags/life/"},{"name":"note","slug":"note","link":"/tags/note/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"}],"categories":[{"name":"日常碎碎念","slug":"日常碎碎念","link":"/categories/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/"},{"name":"学习笔记","slug":"学习笔记","link":"/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"hexo攻略","slug":"hexo攻略","link":"/categories/hexo%E6%94%BB%E7%95%A5/"}],"pages":[{"title":"关于我，关于lifeme02","text":"Hi，欢迎来到我的频道！ 为什么做博客？ 做博客的想法从大三就已经有了，当时正在学javaweb就萌生了做博客的想法，可惜没有坚持下去，甚至javaweb的课程都没有学完。 时间匆匆，已经到了研一，昨日看一位大佬的个人博客网站心血来潮右捡起了做博客的想法，想着现在AI技术这么成熟了，就算我不怎么会前端应该也能做出比较精美的页面。说做就做！ 没想到现在做博客这么简单了，直接使用Hexo就可以直接部署，还有现成的博客模板提供使用，用了一个下午就搭建好了，完全用不到后端知识，前端也直接用现成的模板，没想到这么轻松。 关于我的一些信息 男生，22岁 计算机硕士在读 喜欢游戏、二次元、跑步 在lifeme02你可以看到 算法刷题记录 Java开发岗面试记录 读书感悟与推荐 日常碎碎念 PS: 本站部分素材来自网络，不做商用，侵权删除。","link":"/about.html"},{"title":"分类","text":"damn","link":"/categories/index.html"}]}