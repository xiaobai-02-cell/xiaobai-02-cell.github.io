{"posts":[{"title":"3.27日常更新","text":"最近学习情况 这周在匆忙中度过，有两天给老师做事情，无心学习，不做事情的时候要上课，无心学习。 综上，本周无心学习。不过还有周六周日两天，希望能集中精力多学会。 打游戏 最近每天都上线玩《鸣潮》，有很多喜欢的角色但是资源不够，很纠结，想要直接买号，但是又想着找到实习后赚了钱再买，这种想法对么？ 实习啊实习，希望面试跟“旷课“都能顺利些。 心路历程 最近一直在看一本《心理控制术》的书，里面讲的许多还挺受用，作者所提出的”自我意象“的概念让我觉得有点熟悉，所谓的”自我意象“即你心里对自己的评价与印象，你在现实生活的反应都是基于自我意象，你可以塑造更好的自我意象实现更好的未来，听着满玄乎的。 感觉有点像大学的期末考试，明知道最后不会挂科但是还是要在期末周努力学习。仔细想想应该是先塑造了不会挂科的自我意象，然后通过努力学习使得现实中的自己跟自我意象更加接近了。 还有一个经历是我自己一直自我评价我的数学不是很好，就是学的不是很快，面对数学题脑子转的不快但是只要时间足够依旧能学会，这是我以前为自己设定的自我意象。设定后仿佛现实生活中遇到数学难题都在证明我的自我意象的准确，从而加深自我意象，现在想想这真是太错误了，分明就是给自己设了限制。幸好我还一直坚信应试考试不需要天赋就能得到还不错的成绩，让我高考跟考研数学都没有很差。 所以，不要给轻易自己设限，要树立一个符合实际又强大的自我意象。","link":"/2025/03/21/3.21/"},{"title":"4.12日常更新","text":"最近学习情况 准备面试了，八股文粗略的看了一遍，sql刷了50道题，算法题只刷了三四十题（感觉找小厂日常实习不太用得到那么多算法）。 简历上现在只有一个项目，苍穹外卖跟黑马点评的结合，打算再俗称一个轮子项目手写RPC框架，听说这个项目就是轮子界的苍穹外卖，只能做这些烂大街的项目了。 对于面试还有有点慌的，毕竟还没有工作面试过，希望能顺利一点。接下来应该就会增加更新频率了，顺利的话会更新面经。","link":"/2025/04/12/4.12/"},{"title":"Java学习笔记","text":"Java中实现登录校验拦截器的流程为什么需要登录校验拦截器？ 不同请求可能请求到不同的Controller，每一次都要先校验当前用户的登录状态，这样导致相同的代码写了很多遍。使用拦截器在请求Controller层时先将请求拦截下来，在拦截器中统一校验登录状态，决定是否放行。 实现登录校验拦截器的流程？ 1.自定义一个拦截器类实现HandlerInterceptor接口 2.实现接口中的方法，一般实现两个方法：preHandle()和afterCompletion()，前者是前置拦截，在Controller执行之前进行登录校验，后者在视图渲染完成后执行，用于销毁对应的用户信息，避免内存泄漏。 3.配置拦截器。编写一个mvcConfig配置类实现webmvcConfig接口，并加上@Config注解。 4.在配置类中实现方法addInterceptors()，使用拦截器的注册器添加拦截器及其要拦截的路径 使用JWT令牌的流程 引入jwt令牌操作的工具类 登录成功之后生成jwt令牌返回给前端 之后前端的每次请求都要携带jwt令牌 后续的请求在登录校验拦截器中进行jwt令牌的解析. JWT令牌的组成三部分：1. 令牌头，用于存储签名算法以及令牌类型。 2.有效载荷，存储我们自定义的信息。 3. 签名，根据签名算法及前面两部分的内容生成的，防止Token被篡改，保证安全性。前两部分原本都是Json格式的字符串，后来经过Base64编码。最后一部分不是经过Base64编码生成而是经过签名算法生成。 使用Spring Task的流程 引入Spring Task 的依赖 在启动类上加上@EnableScheduling注解，开启任务调度 自定义一个定时任务类，定时任务类上需要加上@Component注解，交给Spring容器管理 在自定义类中定义方法，编写要定时执行的代码。在该方法上添加@Scheduled注解，注解中编写cron表达式定义定时执行的时间 标准的 Cron 表达式由 6 或 7 个字段组成，字段之间用空格分隔：秒 分 时 日 月 周 [年]其中 [年] 是可选的，通常可以省略。 在我的项目中的应用： 1.买书者挑选了想要买的书并点击下单按钮后订单进入待支付状态，用户有十分钟时间完成付款操作，如果10分钟内没有付款视为超时，取消订单。而使用Spring Task 在每分钟检查是否有超时的订单，如果存在超时的订单，将该订单清除（设置订单状态为已取消） 用户收到货后一直不点击已收货（则当前订单状态一直为派送中），每天凌晨1点处理定时执行处理所有的未收货订单，将其订单状态改为已完成。 使用WebSocket的流程通过Websocket实现管理端页面和服务端保持长连接状态。 导入webSocket的maven坐标 导入webSocket服务端组件webSocketServer，用于和客户端通信 导入配置类webSocketConfiguration，注册webSocket的服务端组件 导入定时任务类，在定时任务类中编写向客户端发送的数据 定时任务类上面首先有@Component注解，表明该类也是交给Spring容器管理。 还有个@ServerEndPoint注解里面填写了访问路径以及路径参数 定时类中方法有@OnOpen(连接建立时调用)，@OnMessage（收到客户端信息时调用）@OnClose（关闭连接方法），上面的方法都是加了对应的注解，自动执行。还有一个自定义的方法sendToAllClient，这个方法向所有会话发送信息，需要手动调用。 乐观锁是什么？怎么实现乐观锁？乐观锁是锁的一种设计理念，在访问共享资源时乐观的认为此次访问不会出现线程安全问题，等到要修改时判断该数据有没有被修改过，如果被修改过则认为出现了安全问题，需要再次尝试修改。乐观锁的实现一般有以下两种 直接使用要访问的共享资源的数量为依据判断是否出现了并发安全问题，但是这种情况下会出现ABA问题，即修改时发现数据跟第一次访问时的数据一致，但是并不能说明没有没有别的线程对该资源进行修改，可能是多个资源来回修改最后又修改回了原来的值。 新增一个版本号字段，每次有线程修改共享数据后都让版本号字段+1，线程修改数据时先判断当前版本号与第一次读取出来的版本号是否一致，如果不一致则发生了线程安全问题，需要自旋重试。 怎么实现一人一单？在单机模式下，通过直接加悲观锁synchronized可以解决，但是在分布式的情况下不行。 在你的项目中使用了Redisson，为什么要使用？ 为了实现一人一单功能，我最开始使用了synchronized锁来实现，但是在集群模式下这样做就会出现多线程并发安全问题，因为不同的tomcat服务器对应不同的JVM，那么synchronized锁住的对象也就成了不同的对象，因此需要添加分布式锁来实现。 最开始使用redis实现分布式锁（使用setnx，ex命令），redis中存储key为userId（用用户id作为锁实现对每个用户的请求加锁而不是对所有请求加锁），value为线程标识，线程标识用于实现在释放锁时比对标识，如果不是自己的锁则不能释放。 但是这样又会出现一个新的问题，对比锁与释放锁的操作不是原子性的，如果在对比锁完成后线程发生了阻塞则又会出现线程安全问题。 因此需要保证这两次操作的原子性，使用Lua脚本可以方便的实现redis多条命令的原子性执行。 以上都是基于redis的分布式锁，但是还有点小问题：1.不可重入 Redisson是在redis基础上实现的分布式工具的集合，我们可以直接使用Redisson提供的可重入的分布式锁。以下是在java中使用Redisson的基本流程： 引入Redisson的依赖 编写配置类配置Redisson 在业务中，先创建锁对象，再尝试获取锁，最后释放锁 Redisson的底层就是通过Lua脚本实现的。 mysql的事务隔离级别有哪几个，都能解决什么问题？ READ-UNCOMMITTED(读取未提交)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。 READ-COMMITTED(读取已提交) ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。 REPEATABLE-READ(可重复读)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。 SERIALIZABLE(可串行化) ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。 MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） synchronized 加在不同地方分别是给谁加的锁？ synchronized 关键字加到 static 静态方法和 synchronized(class) 代码块上都是是给 Class 类上锁； synchronized 关键字加到实例方法上是给对象实例上锁； Spring事务底层原理，事务失效的场景有哪些？在你的项目中使用了微服务拆分思想，从单体架构划分为5个微服务，说一说微服务拆分的原则，并说说你的项目都分成了哪几个微服务？ 我们在做服务拆分时一般有两种方式：1. 纵向拆分 2.横向拆分 所谓纵向拆分，就是按照项目的功能模块来拆分。例如优乐购商城中，就有用户管理功能、订单管理功能、购物车功能、商品管理功能、支付功能等。那么按照功能模块将他们拆分为一个个服务，就属于纵向拆分。这种拆分模式可以尽可能提高服务的内聚性。 而横向拆分，是看各个功能模块之间有没有公共的业务部分，如果有将其抽取出来作为通用服务。例如用户登录是需要发送消息通知，记录风控数据，下单时也要发送短信，记录风控数据。因此消息发送、风控数据记录就是通用的业务功能，因此可以将他们分别抽取为公共服务：消息中心服务、风控管理服务。这样可以提高业务的复用性，避免重复开发。同时通用业务一般接口稳定性较强，也不会使服务之间过分耦合。 我的项目中采用的就是纵向拆分的原则。分为五个大模块：用户模块，商品模块，购物车模块，订单模块，支付模块 确定好了拆分原则，就要确定项目结构，对于微服务拆分一般有两种拆分的项目结构： 把每一个微服务模块作为一个独立Project，创建一个空的文件夹，把每一个微服务模块的project都放到这个文件夹中管理，耦合性最低 每一个微服务模块作为一个Project下的module，建立一个父模块，把其余各个微服务模块作为子模块进行管理，采用maven聚合的方式进行管理。 在你的项目中使用ThreadLocal配合网关过滤器、feign拦截器，封装用户上下文全局工具，实现校验、保存和传递用户信息的功能，详细讲讲。 网关到微服务之间的上下文传递。单体架构时我们只需要完成一次用户登录、身份校验，就可以在所有业务中获取到用户信息。而微服务拆分后，每个微服务都独立部署，不再共享数据。也就意味着每个微服务都需要做登录校验，这显然不可取。既然网关是所有微服务的入口，一切请求都需要先经过网关。我们完全可以把登录校验的工作放到网关去做，这样之前说的问题就解决了。如果我们能够定义一个过滤器，在其中实现登录校验逻辑，并且将过滤器执行顺序定义到NettyRoutingFilter之前，这就符合我们的需求了。我的项目采用自定义GlobalFilter，简单很多，直接实现GlobalFilter接口即可，而且也无法设置动态参数。现在，网关已经可以完成登录校验并获取登录用户身份信息。但是当网关将请求转发到微服务时，微服务又该如何获取用户身份呢？由于网关发送请求到微服务依然采用的是Http请求，因此我们可以将用户信息以请求头的方式传递到下游微服务。然后微服务可以从请求头中获取登录用户信息。考虑到微服务内部可能很多地方都需要用到登录用户信息，因此我们可以利用SpringMVC的拦截器来实现登录用户信息获取，并存入ThreadLocal，方便后续使用。 微服务之间的上下文传递。前端发起的请求都会经过网关再到微服务，由于我们之前编写的过滤器和拦截器功能，微服务可以轻松获取登录用户信息。但有些业务是比较复杂的，请求到达微服务后还需要调用其它多个微服务。比如下单业务，流程如下：下单的过程中，需要调用商品服务扣减库存，调用购物车服务清理用户购物车。而清理购物车时必须知道当前登录的用户身份。但是，订单服务调用购物车时并没有传递用户信息，购物车服务无法知道当前用户是谁！由于微服务获取用户信息是通过拦截器在请求头中读取，因此要想实现微服务之间的用户信息传递，就必须在微服务发起调用时把用户信息存入请求头。微服务之间调用是基于OpenFeign来实现的，并不是我们自己发送的请求。我们如何才能让每一个由OpenFeign发起的请求自动携带登录用户信息呢？这里要借助Feign中提供的一个拦截器接口：feign.RequestInterceptor我们只需要实现这个接口，然后实现apply方法，利用RequestTemplate类来添加请求头，将用户信息保存到请求头中。这样以来，每次OpenFeign发起请求的时候都会调用该方法，传递用户信息。 在你的项目中使用用Sentinel服务保护框架实现微服务保护，包括请求限流、线程隔离、服务熔断，解释一下。 服务故障最重要原因，就是并发太高！解决了这个问题，就能避免大部分故障。当然，接口的并发不是一直很高，而是突发的。因此请求限流，就是限制或控制接口访问的并发流量，避免服务因流量激增而出现故障。 当一个业务接口响应时间长，而且并发高时，就可能耗尽服务器的线程资源，导致服务内的其它接口受到影响。所以我们必须把这种影响降低，或者缩减影响的范围。线程隔离正是解决这个问题的好办法。 为了避免某个接口故障或压力过大导致整个服务不可用，我们可以限定每个接口可以使用的资源范围，也就是将其“隔离”起来。我们给查询购物车业务限定可用线程数量上限为20，这样即便查询购物车的请求因为查询商品服务而出现故障，也不会导致服务器的线程资源被耗尽，不会影响到其它接口。3. 线程隔离虽然避免了雪崩问题，但故障服务（商品服务）依然会拖慢购物车服务（服务调用方）的接口响应速度。而且商品查询的故障依然会导致查询购物车功能出现故障，购物车业务也变的不可用了。 所以，我们要做两件事情： 编写服务降级逻辑：就是服务调用失败后的处理逻辑，根据业务场景，可以抛出异常，也可以返回友好提示或默认数据。 异常统计和熔断：统计服务提供方的异常比例，当比例过高表明该接口会影响到其它服务，应该拒绝调用该接口，而是直接走降级逻辑 Sentinel是阿里巴巴开源的一款服务保护框架，目前已经加SpringCloudAlibaba中，我们只需要引入依赖，并在配置文件中进行相关配置，就可以访问Sentinel提供的控制台对我们的接口进行监控 SeataAT模式跟XA模式的区别你是怎么使用使用RabbitMQ，完成30分钟未支付订单的取消和商品库存的回滚功能的？ 在电商的支付业务中，对于一些库存有限的商品，为了更好的用户体验，通常都会在用户下单时立刻扣减商品库存。例如电影院购票、高铁购票，下单后就会锁定座位资源，其他人无法重复购买。 但是这样就存在一个问题，假如用户下单后一直不付款，就会一直占有库存资源，导致其他客户无法正常交易，最终导致商户利益受损！ 因此，电商中通常的做法就是：对于超过一定时间未支付的订单，应该立刻取消订单并释放占用的库存。 像这种在一段时间以后才执行的任务，我们称之为延迟任务，而要实现延迟任务，最简单的方案就是利用MQ的延迟消息了在RabbitMQ中实现延迟消息也有两种方案： 死信交换机+TTL 延迟消息插件 详细做法见：https://b11et3un53m.feishu.cn/wiki/A9SawKUxsikJ6dk3icacVWb4n3g 怎么使用布隆过滤器解决缓存穿透怎么实现redis跟mysql的双写一致性？问题：我们现在有个数据要更新，是先删除缓存还是先修改数据库？仔细想想，先删除缓存再更新数据库发生问题的概率更大，而先更新数据库再删除缓存，只有当缓存正好过期时才会出现问题。（1.线程1先查询缓存，此时换缓存正好过期，则线程1去查询数据库。2.在查询到数据库还没将查到的新数据写入缓存时，线程2来更新数据3.线程2更新了数据库并删除了缓存4.线程1将他查询到的数据写入缓存5.此时数据库中是线程2修改后的数据，而缓存中是线程1读到的数据，即修改前的数据） 想要保证双写一致性，有两类不同的方法 可以保证强一致性的：加读写锁，读写锁中又有两种锁，共享锁与排他锁，其中共享锁可以实现读读不互斥，读写互斥，而排他锁读读与读写都互斥。 不保证强一致性：使用异步通知的方式（借助MQ或者canal中间件异步通知）ps：延迟双删也是一个常见的解决方法，但是其中这个延时多久不太好确定，在延时的过程中可能会出现脏数据，并不能保证强一致性，所以没有采用它。 讲讲nginx的反向代理 反向代理的主要作用就是接收客户端发送过来的请求并转发给服务端，获得服务端响应数据后返回给客户端。从用户的角度看，公司的核心服务器仿佛就是反向代理服务器，但事实上它只是一个中转站而已。nginx配置反向代理的流程如下： 反向代理是在 Nginx 配置文件中的 location 配置项中配置的，在 location 配置项中使用 proxy_pass 关键字来指定被代理服务器的地址，proxy_pass 关键字后面的被代理服务器（后端服务器）的地址可以用域名、域名+端口、IP、IP+端口这几种方式表示。 如何分析sql的性能？ 我们可以使用 EXPLAIN 命令来分析 SQL 的 执行计划 。执行计划是指一条 SQL 语句在经过 MySQL 查询优化器的优化会后，具体的执行方式。EXPLAIN 并不会真的去执行相关的语句，而是通过 查询优化器 对语句进行分析，找出最优的查询方案，并显示对应的信息。可以查看网络链接获取更详细的：https://javaguide.cn/database/mysql/mysql-query-execution-plan.html#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92 ArrayList的扩容原理 ArrayList 底层使用的是 Object 数组，不保证线程安全。初始化的集中不同情况： 调用空参 123public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;} 调用空参时比较特殊，虽然DEFAULTCAPACITY_EMPTY_ELEMENTDATA为空，但是默认大小却是10，在第一次添加数据时会调用扩容方法将数组扩容到10。 在grow方法中也会判断当前是不是针对DEFAULTCAPACITY_EMPTY_ELEMENTDATA数组的第一次扩容，如果是则将要扩容的大小赋值为10，如果不是则正常的扩容到原数组大小的1.5倍。 数据扩容时调用了Arrays.copyof方法将老数组整个复制到新数组。 hashmap的底层数据结构 JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。 JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于等于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。 HashMap 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。并且， HashMap 总是使用 2 的幂作为哈希表的大小。 AOP的使用","link":"/2025/04/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"(持续更新)Hexo的icarus主题配置攻略与注意事项","text":"总结一下在完善博客功能时遇到的坑 icarus相关文件的位置 老版本的icarus的相关文件都会放在Blog\\themes\\icarus\\的目录下，但是现在新版本的配置文件直接就放在\\Blog\\目录下，themes文件夹为空，其他相关配置在\\Blog\\node_modules\\hexo-theme-icarus这个目录 如果对默认格式不满意，需要去\\Blog\\node_modules\\hexo-theme-icarus找相关的文件修改源代码，一般是.jsx文件 部署成功后默认的当前工作目录是\\Blog\\source，所以你可以在这个目录下新建一个img文件夹存放用到的图片，这样使用到图片时相对路径就是\\img\\XXX.jpg 评论插件 本站使用的是Twikoo评论系统，具体部署流程参考官方文档，一共是两个部署步骤，云部署与本地配置文件设置，本地配置时需要注意： env_id就是云部署完成后你自己可以访问通过的网络链接地址 评论相关设置不在本地文件中，而在博客评论界面有一个小齿轮按钮（别像我一样在本地找了半天） 如果要修改Twikoo前端版本，需要修改\\Blog\\node_modules\\hexo-component-inferno\\lib\\view\\comment 这个目录下的相关js文件，注意是hexo-component-inferno（太坑人了） 同时推荐使用 Qmsg酱，接入 Twikoo 后有新的访客评论时可以直接在🐧收到推送。 —————————————————————————–2025/4/12更新——————————————————————————- 一直想用smms做一个图床，这样在博客中上传图片就可以上传到图床中，这样相比直接在博客文档中插入图片对github服务器的压力小很多，但是最开始的时候smms网站的注册服务网页有问题，我邮件联系了管理员后过了一段时间发现他们竟然直接暂停了注册服务，这下不知道什么时候才能恢复了。","link":"/2025/03/15/hexo%E6%94%BB%E7%95%A5/"},{"title":"Hello World!","text":"Welcome come to my blog! 为什么做博客？做博客的想法从大三就已经有了，当时正在学javaweb就萌生了做博客的想法，可惜没有坚持下去，甚至javaweb的课程都没有学完。 时间匆匆，已经到了研一，昨日看一位大佬的个人博客网站心血来潮右捡起了做博客的想法，想着现在AI技术这么成熟了，就算我不怎么会前端应该也能做出比较精美的页面。说做就做！ 没想到现在做博客这么简单了，直接使用Hexo就可以直接部署，还有现成的博客模板提供使用，用了一个下午就搭建好了，完全用不到后端知识，前端也直接用现成的模板，没想到这么轻松。 接下来的安排完善博客的各种功能吧，例如评论功能，音乐功能，分享功能等等，找一些像素风的二次元人物美化下我的网站。","link":"/2025/03/12/hello-world/"},{"title":"实习日记","text":"总算是进入了心心念念的实习生活了，接下来这个栏目就记录我的实习日常了。 2025/5/19 第一天入职，单程一个小时的通勤时间还是有点长。实习协议还没有签，这周内前程无忧的会联系我签。 去那边见到了一个比我早来20多天的实习生，他是西南石油大三的，我跟他还蛮聊得来的，这是个好消息，但是坏消息是没想到我们要做的开发竟然是客户端开发，不是web开发，什么？你不知道这两者的区别，好吧，一开始我也不是很清楚，不过我们做的客户端开发是用java swing做的，呃。。。，没想到时隔4年还能接触到这玩意，上次接触还是大一课设。 于是，跑路的念头油然而生。不过还是决定先干一小段时间看看情况，因为有详细的文档看看能不能学点有用的东西，且另外一个实习生进度比我快，我要看看他后面能不能接触到业务。就当带薪学习了吧，虽然工资也不高，起码干到下个月看看情况，不行就继续投简历了。 如果决定一直在这里干下去估计我就要每天看看论文刷刷算法了，如果不的话我就继续复习八股文了，下个月再说。 今天主要就是熟悉了一下要开发的软件，最近都要先学会这个怎么使用，不然怎么开发呢？ 2025/5/27 更新一下，上份工作干了四天跑路了，实在是干不下去，特别是看着牛客上都找到了有不错业务的实习，又看着我这学不到什么东西的工作，还是决定辞职了。 昨天刷短视频看到一句话，任何工作的第一目的都是1提升自己，也许只有这样的工作才不会让你感到厌烦。 跑路是跑了，下一份工作要到什么时候才能找到呢，最近在招聘软件上打招呼都感觉不太对劲了，怎么感觉都是那些老岗位，打招呼也没人理，难难难。 2025/7/4 终于想起来更新了，没想到找工作又找了一个月，现在入职了北京信立合创信息技术有限公司，已经入职一周了，薪资待遇是250/天，不过好像是按月结工资，按一个月22天工作，那就是一个月5500，还可以，在北京也可以活下去了。 来北京也是需要点勇气的，当初面这家公司只是一面通过了，二面需要线下面试，虽然HR说二面很简单，但是风险还是不小的，来的当天下午我就租了房，特别感谢我的同事以及前辈王哥，他对我的帮助非常大。租房后就在准备二面，同时心里下定了决心，就算没有通过也要留在北京继续找工作了，毕竟北京的机会比成都多太多了。 现在已经入职一周，这周的工作不是很难，上午十一点半就下班，比上家公司多休息半小时，午饭在负一层食堂，蛮贵的，在办了卡打九折的情况下每顿午餐都要20+，以后还是经常点外卖吧。 这周六预约了毛主席纪念堂跟故宫，票超级难抢，来北京玩一定要提前预约好，不然白跑一趟了，一切都在往好的方面发展。 另外，27届找实习挺难的，这东西超级看运气，有的人面试几天就找到了心仪的工作，我面试了两个月才找到，所以大家不要灰心，相信自己，不要妄自菲薄怀疑自己，找日常实习运气占大头，加油！ 2025/7/18 真是时光匆匆，再次想起来要更新博客已经是半个月前了，又工作了两周，主要的工作是测试功能跟开发一个页面，测试功能的话不难，就是挺多的有点麻烦，开发一个页面是要按照系统现有功能开发出一个类似的最大的难点就是我不懂前端，大概花了三天半的时间做完了，确实学到挺多。 之前没入职前总想趁着上班和下班多学习，像看看论文来着，现在上班的时候基本没时间自己学，下班后也躺在床上不想动，终于意识到自己的校园生活是多么轻松愉快，怀念，要是没有科研的压力就更好了。 2025/8/6 简单讲讲最近的实习情况吧，感觉一半时间在忙一半时间在摸鱼，但是摸鱼也不太好学自己的东西，上周学校那边开了个组会，同门都好厉害，都开始写初稿了，而我还没开始做，真不想做科研啊，还是本科的时候好没什么其他压力，打算月底离职出去玩几天，再回学校做科研了。","link":"/2025/05/19/%E5%AE%9E%E4%B9%A0%E6%97%A5%E8%AE%B0/"},{"title":"面试经历总结","text":"2025/4/17 第1次面试线上面试，薪资待遇200-250/天，面试时间30min开场自我介绍，讲了个人学历背景，获得奖学金情况，学过的技术栈，求职意向。 面试官：自我介绍完了么？ 我此时觉得自己的自我介绍时间太短了，于是接着又介绍了自己的项目（校园二手书交易平台），感觉自己没有描述清楚项目的主要功能，主要模块。 面试官：你刚在一直在说技术，你讲讲业务逻辑，是B/C还是C/C？ 我回答有用户端与管理端，用户端是微信小程序，分别介绍了两个端的功能，感觉没介绍清楚。 面试官：你觉得这个项目中最难的地方是哪里？ 我回答是使用分布式锁实现一人一单，这部分说的太简单而且没有描述清楚，应该先介绍为什么引入分布式锁，说先使用了悲观锁Synchronized发现在集群模式下失效，此时再引入分布式锁。 面试官：一个场景题，怎么解决慢SQL 我回答使用explain，查看是否建立索引，没建立的话就建立索引，explain输出的结果中还有一个字段，用于显示可能优化的方案，但是我忘记了字段名称，也忘记了那几种执行速度的级别。 面试官：为什么不使用MQ，dockers用过么？ 答：还没学 nignx的反向代理原理。 我回答的负载均衡，反向代理忘了。 有没有用过什么ai辅助工具帮助你快速开发。 答：用过cursor几天，后来就不用了，本来想回答用过github copilot，但是确实是没用过。 你有什么要反问的么？ 答：后端几个人？薪资待遇？ **总结：**这次没怎么问八股文，更多的是围绕项目来问，可惜我的表现不好，很多东西没讲清楚，会的也没讲清楚，感觉是为了避免口吃扯了一大堆背景，不过再接再厉吧。面试官说下周给答复，没有答复就是寄了。 2025/5/9 第2次面试北京中科闻歌科技股份有限公司：线上面试，待遇180/天，面试时间30min开场自我介绍，依旧是讲了学历背景，然后做过的项目，这次简历上新增了一个微服务的项目。 Q1: 讲一讲你在项目中遇到的最大的问题，已经你是怎么解决的，通过什么途径解决的。A1: 我回答的是怎么解决微服务的拆分，怎么将单体架构的项目拆分成微服务的项目。 Q2: JAVA中的基础数据类型A2: 整型、浮点型、字符型，int、byte、long、float、double、char、boolean。 Q3: JAVA中的集合，list，set，map的区别A3: 回答出来了 Q4: redis都能有什么作用?（我回答的缓存、分布式锁、mq）他还追问还有什么?A4: 不知道其他的了。 Q5: 索引的回表是什么，怎么对数据库进行优化？A5: 回表回答出来了，数据库优化一时间问懵了，回答的索引，分库分表，sql语句，他还问还有没有其他的，不知道了 Q6: docker常用命令？linux常用命令（查询内存、查询磁盘）A6: docker的回答出来了，linux的一个没回答出来 Q7: git的常见命令，maven的常见命令A7: git只回答出了git clone，其他的说都是在IDEA的图形界面进行提交和回滚，maven的常见命令说的maven clean，package，run。 Q8: 你说你的微服务拆分了五个模块，都是哪五个，没有网关模块么？A8: 五个模块说了说，又回答在项目中实际开发是拆分了七个模块。有一个网关模块跟api模块（用于微服务直接的远程调用）。 Q9: 什么是内存泄漏？（这个不会） 其他的还问了一些，暂时想不起来了，没什么深刻的印象。 最后: 我的问题问完了，你有什么要反问的么？ Q：贵公司是做哪方面的业务，我这次的面试评价。 A: 主要做的ai相关的业务……，面试评价认为我有一定的基础，但是他更看重在校生的基础能力以及学习能力（这时候我想到我第一个问题回答的不是很好，没有详细介绍我是通过什么途径解决这个问题的，没有展现我解决问题的能力）。 他这次问的都是基础的，所以他希望我能够简短快速的回答出来，不用什么都以业务背景来介绍。 2025/5/13 第3次面试超图软件1000-9999：120/天，成都市内，电话面试，面试时间20min开场自我介绍，然后让我讲讲做的项目（讲了微服务拆分的原则）1.你觉得你遇到的最难的问题是什么？（讲了分布式事务，有点忘了）2.讲讲seata AT模式的实现原理3.熟悉设计模式么（不熟悉,只说听说过单例模式）4.讲讲单例模式的好处，为什么要使用？5.arraylist跟linklist的区别6.场景题：怎么再对linklist封装一下能够提高查找效率（不会，他说是缓存）7.树的遍历模式，前序遍历中序遍历后序遍历区别8.什么时候到岗？9.其余的忘了，反问有没有人指导，什么时候出结果总结：面试的都很简单，但是自己没有准备好，会的也不能简单的表达清楚（往往是没有准备过的题），自己准备的题往往还能流利的说出来，感觉自己是因为电话面试没有怎么重视，唉 准备入职拿到了第三个面试的offer，准备下周一入职看看，此模块暂时不更新了。","link":"/2025/04/17/%E9%9D%A2%E7%BB%8F/"}],"tags":[{"name":"life","slug":"life","link":"/tags/life/"},{"name":"note","slug":"note","link":"/tags/note/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"}],"categories":[{"name":"日常碎碎念","slug":"日常碎碎念","link":"/categories/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/"},{"name":"学习笔记","slug":"学习笔记","link":"/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"hexo攻略","slug":"hexo攻略","link":"/categories/hexo%E6%94%BB%E7%95%A5/"},{"name":"实习","slug":"实习","link":"/categories/%E5%AE%9E%E4%B9%A0/"}],"pages":[{"title":"关于我，关于lifeme02","text":"Hi，欢迎来到我的频道！ 为什么做博客？ 做博客的想法从大三就已经有了，当时正在学javaweb就萌生了做博客的想法，可惜没有坚持下去，甚至javaweb的课程都没有学完。 时间匆匆，已经到了研一，昨日看一位大佬的个人博客网站心血来潮右捡起了做博客的想法，想着现在AI技术这么成熟了，就算我不怎么会前端应该也能做出比较精美的页面。说做就做！ 没想到现在做博客这么简单了，直接使用Hexo就可以直接部署，还有现成的博客模板提供使用，用了一个下午就搭建好了，完全用不到后端知识，前端也直接用现成的模板，没想到这么轻松。 关于我的一些信息 男生，22岁 计算机硕士在读 喜欢游戏、二次元、跑步 在lifeme02你可以看到 算法刷题记录 Java开发岗面试记录 读书感悟与推荐 日常碎碎念 PS: 本站部分素材来自网络，不做商用，侵权删除。","link":"/about.html"},{"title":"分类","text":"damn","link":"/categories/index.html"}]}